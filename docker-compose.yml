version: '3.9'

services:

  postgres:
    image: postgres:14
    container_name: movie_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smart_movie_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

 
  mongodb:
    image: mongo
    container_name: watchlist_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    env_file:
      - .env
    networks:
      - smart_movie_network
    volumes:
      - mongo_data:/data/db

 
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - smart_movie_network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
      
  auth-service:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "5003:8080"
    networks:
      - smart_movie_network

 
  movie-service:
    build:
      context: .
      dockerfile: MovieService/Dockerfile
    container_name: movie-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "5001:8080"
    env_file:
      - .env
    networks:
      - smart_movie_network


  watchlist-service:
    build:
      context: .
      dockerfile: WatchlistService/Dockerfile
    container_name: watchlist-service
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5002:8080"
    networks:
      - smart_movie_network


  api-gateway:
    container_name: api-gateway
    image: api-gateway
    build:
      context: .
      dockerfile: InternalGateway/Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - smart_movie_network
  
  kong:
    image: kong:3.4
#    image: kong/kong-gateway:3.4.0.0-enterprise
    container_name: kong
    ports:
      - "8000:8000"
      - "8001:8001"
    env_file:
      - .env
    environment:
      KONG_LOG_LEVEL: debug
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_PLUGINS: bundled,request-transformer-advanced
#      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong.yml:/usr/local/kong/kong.yml
    networks:
      - smart_movie_network
    restart: unless-stopped

  #  
  #  
  #  
  #  kong-db:
  #    image: postgres:13
  #    container_name: kong-db
  #    environment:
  #      POSTGRES_USER: kong
  #      POSTGRES_DB: kong
  #      POSTGRES_PASSWORD: kong
  #    volumes:
  #      - kong_data:/var/lib/postgresql/data
  #    networks:
  #      - smart_movie_network
  #    restart: unless-stopped
  #    healthcheck:
  #      test: [ "CMD-SHELL", "pg_isready -U kong" ]
  #      interval: 5s
  #      timeout: 5s
  #      retries: 5
  #  
  #  
  #  kong-migrations:
  #    image: kong:3.4
  #    command: kong migrations bootstrap
  #    depends_on:
  #      - kong-db
  #    environment:
  #      KONG_DATABASE: postgres
  #      KONG_PG_HOST: kong-db
  #      KONG_PG_USER: kong
  #      KONG_PG_PASSWORD: kong
  #    networks:
  #      - smart_movie_network
  #    restart: "no"
  #
  #  kong:
  #    image: kong:3.4
  #    container_name: kong
  #    depends_on:
  #      kong-db:
  #        condition: service_healthy
  #      kong-migrations:
  #        condition: service_completed_successfully
  #    environment:
  #      KONG_LOG_LEVEL: debug
  #      KONG_DATABASE: postgres
  #      KONG_PG_HOST: kong-db
  #      KONG_PG_USER: kong
  #      KONG_PG_PASSWORD: kong
  #      KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #      KONG_PROXY_LISTEN: 0.0.0.0:8000
  #    ports:
  #      - "8000:8000"
  #      - "8001:8001"
  #    networks:
  #      - smart_movie_network
  #    healthcheck:
  #      test: ["CMD", "curl", "-s", "-f", "http://localhost:8001/status"]
  #      interval: 5s
  #      timeout: 5s
  #      retries: 10
  #    restart: unless-stopped
  #
  #  kong-manager-service:
  #    build:
  #      context: .
  #      dockerfile: KongManager/Dockerfile
  #    container_name: kong-manager
  #    depends_on:
  #      - kong
  #    env_file:
  #      - .env
  #    networks:
  #      - smart_movie_network
  #    restart: unless-stopped




volumes:
  postgres_data:
  mongo_data:
#  kong_data:

networks:
  smart_movie_network:
    external: true
