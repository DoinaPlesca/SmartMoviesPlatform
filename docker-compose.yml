version: '3.9'

services:

  postgres:
    image: postgres:14
    container_name: movie_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smart_movie_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

 
  mongodb:
    image: mongo
    container_name: watchlist_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - smart_movie_network
    volumes:
      - mongo_data:/data/db

 
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - smart_movie_network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

 
  movie-service:
    build:
      context: .
      dockerfile: MovieService/Dockerfile
    container_name: movie-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "5001:8080"
    env_file:
      - .env
#    environment:
#      - RABBITMQ_HOST=rabbitmq
#      - DB_CONNECTION_STRING=Host=postgres;Port=5432;Database=postgres;Username=postgres;Password=P@ssw0rd!
    networks:
      - smart_movie_network

#  
#  watchlist-service:
#    build:
#      context: ./WatchlistService
#    container_name: watchlist-service
#    depends_on:
#      mongodb:
#        condition: service_started
#      rabbitmq:
#        condition: service_started
#    environment:
#      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
#      - MongoDbSettings__DatabaseName=WatchlistDb
#    ports:
#      - "5002:80"
#    networks:
#      - smart_movie_network
#
#  
#  api-gateway:
#    build:
#      context: ./ApiGateway
#    container_name: api-gateway
#    depends_on:
#      - movie-service
#      - watchlist-service
#    ports:
#      - "5000:80"
#    networks:
#      - smart_movie_network
#    volumes:
#      - ./ApiGateway/ocelot.json:/app/ocelot.json

volumes:
  postgres_data:
  mongo_data:

networks:
  smart_movie_network:
    driver: bridge
